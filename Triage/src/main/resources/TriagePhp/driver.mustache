<?php
/**
 * Contains the Driver class.
 *
 * This is a generated class, as this class gets updated as our application needs to add functionality.
 * An example of this is the ability to pass another VO to a particular method and have it transformed.
 *
 * @category   {{moduleName}}
 * @package    {{modelPackage}}
 * @subpackage {{modelSubPackage}}
 *
 * @author     {{{author}}}
 * @since      {{currentDate}}
 */

/**
 * @namespace
 */
namespace {{modelSubPackage}};

use TriCore\Driver\EndPoint\AbstractEndPoint;
use TriStudio\Resource\AbstractVariableObject;

/**
 * Driver which will transfer our application configuration into the required data for module
 *
 * @category   {{moduleName}}
 * @package    {{modelPackage}}
 * @subpackage {{modelSubPackage}}
 *
 * @author     {{{author}}}
 * @since      {{currentDate}}
 */
class {{driverName}}Driver extends {{driverName}}Client
{

    /**
     * Apply the required configuration to the object
     *
     * @param array $arrConfig The configuration array
     *
     * @author {{{author}}}
     * @since  {{currentDate}}
     *
     * @throws \TriCore\Driver\Exception\RuntimeException When driver configuration is invalid
     *
     * @return void
     */
    public function __construct(array $arrConfig)
    {
        if (!array_key_exists('url', $arrConfig) || !array_key_exists('port', $arrConfig)) {
            throw new \TriCore\Driver\Exception\RuntimeException(
                '{{driverName}}Driver details incorrectly configured:' . json_encode($arrConfig),
                \TriCore\Driver\Exception\RuntimeException::UNEXPECTED_DRIVER_CONFIGURATION
            );
        }

        $iProtoSplit = strpos($arrConfig['url'], AbstractEndPoint::PROTOCOL_SPLIT);
        $sProtocol = substr($arrConfig['url'], 0, $iProtoSplit);
        $sHost = substr($arrConfig['url'], $iProtoSplit + strlen(AbstractEndPoint::PROTOCOL_SPLIT));
        $arrConfiguration = array(
            'protocol' => $sProtocol,
            'host' => $sHost,
            'port' => $arrConfig['port']
        );
        parent::__construct($arrConfiguration);
    }

}