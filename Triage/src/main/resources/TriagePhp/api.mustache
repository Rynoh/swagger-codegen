<?php
/**
 * Contains the {{classname}}Endpoint class.
 *
 * @category   {{apiCategory}}
 * @package    {{apiPackage}}
 * @subpackage {{apiSubPackage}}
 *
 * @author     {{{author}}}
 * @since      23 May 2016
 */

/**
 * @namespace
 */
namespace {{apiSubPackage}};

use {{apiPackage}}\AbstractEndPoint;
{{#imports}}
use {{import}}VO;
{{/imports}}

/**
 * Contains the {{classname}}Endpoint class.
 *
 * @category   {{apiCategory}}
 * @package    {{apiPackage}}
 * @subpackage {{apiSubPackage}}
 *
 * @author     {{{author}}}
 * @since      23 May 2016
 */
class {{classname}}Endpoint extends AbstractEndPoint
{

    /**
     * The params the end point will use.
     *
     * @var array
     */
    protected $arrParams = array();

    /**
     * Setter for the params for the current endpoint
     *
     * @param array $arrParams The params
     *
     * @author {{{author}}}
     * @since  23 May 2016
     *
     * @return void
     */
    public function setParams($arrParams)
    {
        $this->arrParams = $arrParams;
    }

    {{#operations}}
    {{#operation}}
    public function {{operationId}}()
    {
        {{#pathParams}}
        {{#-last}}
        $sUrl = $this->replacePathToken(
            '{{path}}',
            $this->arrParams
        );
        $sUrl = $this->getAbsoluteUri($sUrl);
        {{/-last}}
        {{/pathParams}}
        {{^pathParams}}
        $sUrl = $this->getAbsoluteUri('{{path}}');
        {{/pathParams}}

        $objResponse = $this->send($sUrl, \Zend\Http\Request::METHOD_{{httpMethod}});

        $objBody = json_decode($objResponse->getBody());
        $objResponseVO = null;
        /** @var \TriStudio\Resource\Helper\VariableObjectFromStdClass $objVoFromStdClass */
        $objVoFromStdClass = $this->getServiceManager()->get('VariableObjectFromStdClass');
        switch ($objResponse->getStatusCode()) {
            {{#responses}}
            {{#dataType}}
            {{^isWildcard}}case {{code}}:{{/isWildcard}}{{#isWildcard}}default:{{/isWildcard}}
                $objVO = $objVoFromStdClass->populate(new {{baseType}}VO(), $objBody);
                {{^isSuccess}}
                $objExceptionVO = new \{{exceptionSubPackage}}\RuntimeException();
                $objExceptionVO->setErrorObject($objVO);
                throw $objExceptionVO;
                {{/isSuccess}}
                break;
            {{/dataType}}
            {{/responses}}
        }
        return $objVO;
    }

    {{/operation}}
    {{/operations}}
}

